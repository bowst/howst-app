# -*- mode: ruby -*-
# vi: set ft=ruby :

#libraries
require 'yaml'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.require_version ">= 1.5.0"

howst = YAML::load_file "howst.yml"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  #GLOBAL CONFIGS
  config.vm.box = "bowst/howst"
  config.vm.network :private_network, type: "dhcp"
  config.nfs.map_uid = Process.uid
  config.nfs.map_gid = Process.gid

  #PER MACHINE CONFIGURATION
  howst["machines"].each do |machine|
    config.vm.define "#{machine['hostname']}" do |node|
      
      node.vm.hostname = "#{machine['hostname']}"
      
      node.vm.network "forwarded_port", guest: 80, host: machine['port']
      # Share an additional folder to the guest VM.  
      # Docroot
      node.vm.synced_folder machine['host_docroot'], "/var/www/drupal", :create => true,
        :"mount_options" => ["dmode=770,fmode=770"] 
      #Drush files
      node.vm.synced_folder machine['path_to_drush_files'], "/home/vagrant/.drush", :create => true,
        :"mount_options" => ["dmode=770","fmode=770"]
      #Drush install
      node.vm.provision "shell", inline: "sudo apt-get update"
      case machine['drush_version']
        when 5
          node.vm.provision "shell", inline: "sudo apt-get install drush -y"
        when 7
          node.vm.provision "shell" do |s| 
            s.inline = "composer global require drush/drush:dev-master"
            s.privileged = false
          end
        else
          node.vm.provision "shell" do |s| 
            s.inline = "composer global require drush/drush:6.*"
            s.privileged = false
          end
      end
      #If this is a pantheon site, lets install Terminus too
      if machine['is_pantheon']
        node.vm.provision "shell", inline: "sudo curl https://github.com/pantheon-systems/cli/releases/download/0.4-beta/terminus.phar -L -o /usr/local/bin/terminus && sudo chmod +x /usr/local/bin/terminus"
      end
      #STEP TO PREP FOR EXISTING SITES
      if machine['is_existing_site']
        #create script to pull down the db
        $guest_script = <<-SCRIPT
          set -e
          echo "Pulling Remote Database..."
          drush @#{machine['drush_alias']} sql-dump | tail -n +2 > /home/vagrant/db.sql
          echo "Updating local Database..."
          drush sql-cli < /home/vagrant/db.sql --db-url='mysql://root:#{machine['db_root_password']}@#{machine['db_host']}/#{machine['db_name']}'
          echo 'Database pulled successfully!'
        SCRIPT
        #create db script
        node.vm.provision "shell", inline: "echo \"#{$guest_script}\" > /home/vagrant/pull-db.sh"
        #add script as command
        node.vm.provision "shell", inline: "echo \"alias pull-db='sh /home/vagrant/pull-db.sh'\" >> /home/vagrant/.bashrc"
        #Create settings.php if it doesn't exit
        $settings_php = <<-SETTINGS
          <?php
            â€‹// Local development configuration.
            if (!defined('PANTHEON_ENVIRONMENT')) {
              // Database.
              $databases['default']['default'] = array(
                'database' => '#{machine['db_name']}',
                'username' => '#{machine['db_user']}',
                'password' => '#{machine['db_password']}',
                'host' => '#{machine['db_host']}',
                'driver' => 'mysql',
                'port' => 3306,
                'prefix' => '',
              );
            }
        SETTINGS
        $script = <<-SCRIPT
          if [ -f /var/www/drupal/sites/default/settings.php ];
          then
             echo \"#{$settings_php}\" > /var/www/drupal/sites/default/settings.php
          fi
        SCRIPT
        #this is not yet operational
        #node.vm.provision "shell", inline: $script
        
        #pull down the database
        $pulldb = <<-DB
          echo "Setting up the database" 
          drush @#{machine['drush_alias']} sql-dump | tail -n +2 > /home/vagrant/db.sql
          drush sql-cli < /home/vagrant/db.sql --db-url='mysql://root:#{machine['db_root_password']}@#{machine['db_host']}/#{machine['db_name']}'
        DB
        node.vm.provision "shell", inline: $pulldb, privileged: false 
      else
        #version
        version_7 = "drupal-7.34"
        version_8 = "drupal-8.0.0-beta4"
        if machine["drupal_version"] == 7
          version = version_7
          url = "http://ftp.drupal.org/files/projects/#{version_7}.tar.gz"
        else
          version = version_8
          url = "http://ftp.drupal.org/files/projects/#{version_8}.tar.gz"
        end
        #This is a NEW site, let's let drush handle building the new site for us
        $install_script = <<-SCRIPT
          source /home/vagrant/.bashrc
          export PATH="$HOME/.composer/vendor/bin:$PATH"
          echo "Downloading drupal..." 
          wget #{url}
          tar xvfz #{version}.tar.gz -C /var/www/drupal --strip-components=1
          cd /var/www/drupal
          echo "Installing drupal..." 
          yes | drush site-install --db-url='mysql://#{machine['db_user']}:#{machine['db_password']}@#{machine['db_host']}/#{machine['db_name']}' --site-name=#{machine['hostname']} --account-pass=password
        SCRIPT
        node.vm.provision "shell" do |s|
          s.inline = $install_script
          s.privileged = false
        end
      end
      #Set the appropriate permissions and restart apache!
      $set_permissions = <<-SCRIPT
        echo "Setting permissions and restarting server" 
        sudo chown -R www-data:www-data /var/www/drupal && sudo gpasswd -a www-data vagrant
        sudo service apache2 restart
      SCRIPT
      node.vm.provision "shell", inline: $set_permissions
    end
  end
end
